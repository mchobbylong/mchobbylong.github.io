[{"content":"序言 利益是人类行动的一切动力。\n——霍尔巴赫\n最近疫情形势紧张，口罩供给一直跟不上需求。我所在的城市政府为了让大家都有口罩用，也和其他大城市一样推出了口罩预约系统，所有人每天早上 9 点准时登录网站，拼手速点预约按钮，谁够快谁就能预约到口罩。\n一开始我也没注意过这个系统，毕竟一个市的人去抢，一般都抢不过……然而后来某个亲戚抢口罩的时候注意到了系统的一个小问题，从而人手抢到了口罩。于是，我开始着手研究这个预约系统。\n1. 利用倒计时读秒 Bug 加快进入系统 登录系统后首先发现的一个问题是，倒计时读秒似乎比真实情况慢很多：\n平均情况下 1 分钟的读秒，这个网页要多花 2~3 秒钟。虽然可以通过刷新网页的方式重置计时，然而网站到最后一两分钟的时候访问人数又爆炸多，最后一分钟刷新网页几乎不可能……\n虽然不知道这个问题是不是故意的（谁这么无聊啊），不过这个问题的严重程度，就连程序猿都要另外实现一个接口，每隔一段时间获取服务器时间重置一下计时。\n由此可以判断，网页载入的时候必定要获取一次服务器时间，用来计算倒计时剩余时间。再一看前端用了 Vue 这样前后端分离的框架，那么只需要用一个抓包工具，修改服务器的响应时间，让前端得到错误的服务器时间，就能比其他正常读秒的人更快看到预约按钮了。\n这里我用了 Fiddler，一个大名鼎鼎的 Windows 系统代（zhua）理（bao）工具。预约网站本身连 https 都没有，甚至连配证书的功夫都省了，直接上抓包日志：\n可以判断出 time 应该是后端本身封装的响应属性，而 data.currentTime 应该就是前端读取的服务器时间了，修改这个值就够了。\n在 Fiddler 点击 Rules -\u0026gt; Customize Rules...，在打开的 Fiddler ScriptEditor 中查找函数 OnBeforeResponse，Fiddler 就是在返回响应前调用了这个函数，我们利用提供的 oSession 变量修改响应包中的 data.currentTime 就好了。核心代码如下：\n1 2 3 4 5 6 7 8 9 var modTime = DateTime.Now.AddMinutes(20); var timeStr = modTime.ToString(\u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34;); obj.JSONObject[\u0026#34;time\u0026#34;] = timeStr; if (oSession.uriContains(\u0026#34;getNewOrder\u0026#34;)) { obj.JSONObject[\u0026#34;data\u0026#34;][\u0026#34;currentTime\u0026#34;] = timeStr; } if (oSession.uriContains(\u0026#34;serverTime\u0026#34;)) { obj.JSONObject[\u0026#34;data\u0026#34;] = timeStr; } 这里我保险起见，连 time 也一起修改了。而修改 data 本身是因为过一段时间后，前端会向后端请求服务器时间、重置倒计时，因此针对 URI 中含有 serverTime 的响应也进行了修改。有意思的地方是，Fiddler 这个 Rule 脚本的语言是 C#，我一开始并不知道，为了一句简单的 DateTime.Now 还查了好久的官方文档，到处碰壁 🤦‍\n现在就能比正常人更快看到预约按钮了（如下图）！但是仅仅靠这个还不够，因为提早看到按钮不代表能早于开抢时间进行预约，更不代表你能比其他人更准时地点那个按钮……\n2. 油猴注入 JS 脚本实现自动点击 既然人手难以保证准时准点按下预约按钮，下一步就是考虑怎么让电脑自动按按钮了。\n由于绝大多数情况下，服务器时间和本地时间并不一致，不能简单地按照本地时间进行操作。然而要和服务器校准时间也很难……于是决定采用最暴力的方法，从某个时间开始，每隔一小段时间就按一次按钮。\n由于按按钮只是触发了按钮对应 DOM 的 click 事件，只需要原生 JS 脚本就能做到。再利用 setTimeout 模拟倒计时（比网页自己实现的那个要准），就可以做到在某个时刻按下按钮了：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // Set the target time let target = new Date(); target.setHours(8); target.setMinutes(59); target.setSeconds(59); target.setMilliseconds(500); console.log(\u0026#39;The target time is: \u0026#39; + target.format(\u0026#39;yyyy-MM-dd hh:mm:ss.S\u0026#39;)); const countDown = target.getTime() - new Date().getTime(); console.log(\u0026#39;countDown:\u0026#39;, countDown); setTimeout(function () { const interval = setInterval(function () { console.log(\u0026#39;click\u0026#39;); document.getElementById(\u0026#39;hq_btn\u0026#39;).click(); }, 300); setTimeout(function () { clearInterval(interval); console.log(\u0026#39;Done\u0026#39;); }, 2500); }, countDown); ","date":"2020-03-05T22:56:07+08:00","permalink":"https://mchobbylong.github.io/post/2020/03/pyppeteer-fiddler-zskz/","title":"利用 Pyppeteer + Fiddler 实现半自动抢口罩"},{"content":" 我又回来了（笑\n曾经 之前高中的时候有过一段写博客的经历。\n当时因为是处于全力学习的阶段，难免会忘记。在老师的要求下开了 CSDN 学习笔记博客，写的时候温习知识、需要时当复习材料。不得不说起到了很好的助学效果。\n上了大学以后我觉得我已经不需要维护博客这种东西了。又不是学习笔记，要花时间写，这么麻烦的事情谁想搞 _(:з)∠)_\n现在 到了现在，突然发现自己真的是学什么忘什么，比如在软件工坊课上学了没多久的 Flask，Bootstrap，RequireJS 这些东西，半年后通通忘光。这些知识不需要用的时候忘掉无所谓；需要用的时候又要扒资料重新学，太难受了。\n于是博客又重新开坑了。不用 CSDN，是因为怕有什么奇怪的内容发不出去 (?)；另外可以尝鲜一下静态博客生成器，也不错。\n这次用的是 Hugo，感觉只要不是重度魔改，足够用了。博客的内容才是关键不是嘛（\n今后加油吧。尽量抽空写。\nP.S. 感谢学长 RainySummerLuo 推荐的 Hexo 主题 Vexo，真的是一眼对上口味😂\n2022-10-28 更新：Vexo 貌似已经不适配新版 Hugo 了，伤心😢\n","date":"2020-03-05T20:37:35+08:00","permalink":"https://mchobbylong.github.io/post/2020/03/creating-blog/","title":"博客开坑了"}]